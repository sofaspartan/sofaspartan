Sqls

1. Comments Table
create table comments (
  id uuid default uuid_generate_v4() primary key,
  user_id uuid references auth.users(id),
  content text not null,
  parent_id uuid references comments(id),
  likes integer default 0,
  dislikes integer default 0,
  created_at timestamp with time zone default timezone('utc'::text, now()),
  updated_at timestamp with time zone default timezone('utc'::text, now())
);

-- Add RLS policies
alter table comments enable row level security;

create policy "Users can view all comments"
  on comments for select
  using (true);

create policy "Authenticated users can insert comments"
  on comments for insert
  with check (auth.role() = 'authenticated');

create policy "Users can update their own comments"
  on comments for update
  using (auth.uid() = user_id);

create policy "Users can delete their own comments"
  on comments for delete
  using (auth.uid() = user_id);

2. Votes Table
create table votes (
  id uuid default uuid_generate_v4() primary key,
  user_id uuid references auth.users(id) not null,
  comment_id uuid references comments(id) not null,
  vote_type text check (vote_type in ('like', 'dislike')) not null,
  created_at timestamp with time zone default timezone('utc'::text, now()),
  unique(user_id, comment_id)
);

-- Add RLS policies
alter table votes enable row level security;

create policy "Users can view all votes"
  on votes for select
  using (true);

create policy "Users can insert their own votes"
  on votes for insert
  with check (auth.uid() = user_id);

create policy "Users can update their own votes"
  on votes for update
  using (auth.uid() = user_id);

create policy "Users can delete their own votes"
  on votes for delete
  using (auth.uid() = user_id);

3. User Profiles, Comments, and Votes Management
-- Create profiles table
CREATE TABLE IF NOT EXISTS public.profiles (
    id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
    email TEXT,
    user_metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create comments table with proper relationships
CREATE TABLE IF NOT EXISTS public.comments (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    parent_id UUID REFERENCES public.comments(id) ON DELETE CASCADE,
    likes INTEGER DEFAULT 0,
    dislikes INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create votes table
CREATE TABLE IF NOT EXISTS public.votes (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE,
    comment_id UUID REFERENCES public.comments(id) ON DELETE CASCADE,
    vote_type TEXT CHECK (vote_type IN ('like', 'dislike')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(user_id, comment_id)
);

-- Enable Row Level Security
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.votes ENABLE ROW LEVEL SECURITY;

-- Create policies for profiles
CREATE POLICY "Users can view all profiles"
    ON public.profiles FOR SELECT
    USING (true);

CREATE POLICY "Users can update their own profile"
    ON public.profiles FOR UPDATE
    USING (auth.uid() = id);

-- Create policies for comments
CREATE POLICY "Users can view all comments"
    ON public.comments FOR SELECT
    USING (true);

CREATE POLICY "Authenticated users can insert comments"
    ON public.comments FOR INSERT
    WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Users can update their own comments"
    ON public.comments FOR UPDATE
    USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own comments"
    ON public.comments FOR DELETE
    USING (auth.uid() = user_id);

-- Votes policies
CREATE POLICY "Users can view all votes"
    ON public.votes FOR SELECT
    USING (true);

CREATE POLICY "Authenticated users can insert votes"
    ON public.votes FOR INSERT
    WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Users can update their own votes"
    ON public.votes FOR UPDATE
    USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own votes"
    ON public.votes FOR DELETE
    USING (auth.uid() = user_id);

4. User Profiles Table
-- Create profiles table
CREATE TABLE IF NOT EXISTS public.profiles (
    id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
    email TEXT,
    user_metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Enable RLS
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view all profiles"
    ON public.profiles FOR SELECT
    USING (true);

CREATE POLICY "Users can update their own profile"
    ON public.profiles FOR UPDATE
    USING (auth.uid() = id);

-- Create a trigger to automatically create a profile when a new user signs up
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.profiles (id, email, user_metadata)
    VALUES (NEW.id, NEW.email, NEW.raw_user_meta_data);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

5. Avatar Storage Setup
-- Create storage bucket for avatars
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
    'avatars',
    'avatars',
    true,
    5242880, -- 5MB limit
    ARRAY['image/jpeg', 'image/png', 'image/gif', 'image/webp']
)
ON CONFLICT (id) DO NOTHING;

-- Set up storage policies
CREATE POLICY "Avatar images are publicly accessible"
    ON storage.objects FOR SELECT
    USING (bucket_id = 'avatars');

CREATE POLICY "Users can upload their own avatar"
    ON storage.objects FOR INSERT
    WITH CHECK (
        bucket_id = 'avatars' AND
        auth.role() = 'authenticated'
    );

CREATE POLICY "Users can update their own avatar"
    ON storage.objects FOR UPDATE
    USING (
        bucket_id = 'avatars' AND
        auth.role() = 'authenticated'
    );

CREATE POLICY "Users can delete their own avatar"
    ON storage.objects FOR DELETE
    USING (
        bucket_id = 'avatars' AND
        auth.role() = 'authenticated'
    );

6. Insert new user profiles
INSERT INTO public.profiles (id, email, user_metadata)
SELECT
    u.id,
    u.email,
    u.raw_user_meta_data
FROM
    auth.users u
LEFT JOIN
    public.profiles p ON u.id = p.id
WHERE
    p.id IS NULL;

7. Flag Tables with Enum Type
-- Create flag_type enum (optional but good practice)
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'flag_type_enum') THEN
        CREATE TYPE public.flag_type_enum AS ENUM ('inappropriate', 'spam');
    END IF;
END$$;

-- Create flags table
CREATE TABLE IF NOT EXISTS public.flags (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    comment_id UUID REFERENCES public.comments(id) ON DELETE CASCADE NOT NULL,
    flag_type public.flag_type_enum NOT NULL, -- Use the enum type
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(user_id, comment_id) -- Prevent multiple flags per user per comment
);

-- Enable RLS
ALTER TABLE public.flags ENABLE ROW LEVEL SECURITY;

-- Policies for flags table
CREATE POLICY "Authenticated users can insert their own flags" 
    ON public.flags FOR INSERT 
    WITH CHECK (auth.role() = 'authenticated' AND auth.uid() = user_id);

CREATE POLICY "Users can delete their own flags" 
    ON public.flags FOR DELETE 
    USING (auth.uid() = user_id);

CREATE POLICY "Users can view their own flags" 
    ON public.flags FOR SELECT 
    USING (auth.uid() = user_id);

-- Add index for faster lookups
CREATE INDEX IF NOT EXISTS flags_comment_id_idx ON public.flags(comment_id);
CREATE INDEX IF NOT EXISTS flags_user_id_idx ON public.flags(user_id);

8. Update Foreigh Keys for Comments
-- Drop the existing foreign key constraint for parent_id
ALTER TABLE public.comments
DROP CONSTRAINT IF EXISTS comments_parent_id_fkey; -- Use the actual constraint name if different

-- Add the foreign key constraint back with ON DELETE CASCADE
ALTER TABLE public.comments
ADD CONSTRAINT comments_parent_id_fkey
FOREIGN KEY (parent_id)
REFERENCES public.comments(id)
ON DELETE CASCADE; -- Add this cascade behavior

9. Default User Types
-- Update existing users to have a default user_type
UPDATE profiles
SET user_metadata = jsonb_set(user_metadata, '{user_type}', '"regular"')
WHERE user_metadata->>'user_type' IS NULL;

10. Add user_type to user_metadata
-- Add user_type to user_metadata for all users, defaulting to "regular"
UPDATE profiles
SET user_metadata = jsonb_set(
  COALESCE(user_metadata, '{}'),
  '{user_type}',
  '"regular"'
)
WHERE user_metadata->>'user_type' IS NULL;

11. Comment Deletion Policy
-- Drop existing delete policy
DROP POLICY IF EXISTS "Users can delete their own comments" ON comments;

-- Create new delete policy that allows both owners and admins to delete comments
CREATE POLICY "Users can delete their own comments or admins can delete any"
ON comments
FOR DELETE
USING (
  auth.uid() = user_id 
  OR 
  EXISTS (
    SELECT 1 FROM profiles
    WHERE profiles.id = auth.uid()
    AND profiles.user_metadata->>'user_type' = 'admin'
  )
);

-- Add comment to explain the policy
COMMENT ON POLICY "Users can delete their own comments or admins can delete any" ON comments IS 'Allows users to delete their own comments and admins to delete any comment';

12. Ping Function
-- Create a simple ping function that returns a success message
CREATE OR REPLACE FUNCTION public.ping()
RETURNS json
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN json_build_object(
        'status', 'success',
        'message', 'Database is responsive',
        'timestamp', now()
    );
END;
$$;

13. Comment Notificaiton Handler
-- Create a function to handle comment notifications
CREATE OR REPLACE FUNCTION public.handle_comment_notification()
RETURNS TRIGGER AS $$
DECLARE
    account_email TEXT;
BEGIN
    -- Get the account holder's email
    SELECT email INTO account_email
    FROM public.profiles
    WHERE id = NEW.user_id;

    -- Send email notification
    PERFORM
        net.http_post(
            url := 'https://tdgatkfrfaejitdafeas.supabase.co/functions/v1/comment-notification',
            headers := jsonb_build_object(
                'Content-Type', 'application/json',
                'Authorization', 'Bearer ' || current_setting('app.settings.service_role_key')
            ),
            body := jsonb_build_object(
                'to', account_email,
                'subject', 'New Comment Notification',
                'template', 'comment_notification',
                'data', jsonb_build_object(
                    'Email', account_email,
                    'CommentContent', NEW.content,
                    'CommentURL', 'https://sofaspartan.com/comments#' || NEW.id
                )
            )
        );
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create a trigger to send notifications on new comments
CREATE TRIGGER on_comment_created
    AFTER INSERT ON public.comments
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_comment_notification();